-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is ModuleSignalsMuxModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity ModuleSignalsMuxModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

Addr : in  unsigned(1 downto 0);
I1 : in  std_logic;
I2 : in  std_logic;
O : out  std_logic;
CombinedO : out  unsigned(2 downto 0)
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of ModuleSignalsMuxModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
constant Zero : std_logic := '0';
constant One : std_logic := '1';
constant true : std_logic := '1';
constant false : std_logic := '0';
signal Inputs_Addr : unsigned(1 downto 0) := (others => '0');
signal Inputs_I1 : std_logic := '0';
signal Inputs_I2 : std_logic := '0';
signal AndGate_I1 : std_logic := '0';
signal AndGate_I2 : std_logic := '0';
signal AndGate_O : std_logic := '0';
signal OrGate_I1 : std_logic := '0';
signal OrGate_I2 : std_logic := '0';
signal OrGate_O : std_logic := '0';
signal XorGate_I1 : std_logic := '0';
signal XorGate_I2 : std_logic := '0';
signal XorGate_O : std_logic := '0';
signal ModuleSignalsMuxModule_L29F41T80_Source : unsigned(2 downto 0) := (others => '0');
signal AndGateI1AndGate_I1HardLink : std_logic := '0';
signal AndGateI2AndGate_I2HardLink : std_logic := '0';
signal AndGateOAndGate_OHardLink : std_logic := '0';
signal OrGateI1OrGate_I1HardLink : std_logic := '0';
signal OrGateI2OrGate_I2HardLink : std_logic := '0';
signal OrGateOOrGate_OHardLink : std_logic := '0';
signal XorGateI1XorGate_I1HardLink : std_logic := '0';
signal XorGateI2XorGate_I2HardLink : std_logic := '0';
signal XorGateOXorGate_OHardLink : std_logic := '0';
signal ModuleSignalsMuxModule_L27F26T46_Mux : std_logic := '0';
signal ModuleSignalsMuxModule_L27F26T46_MuxMultiplexerAddress : unsigned(1 downto 0)  := "00";
signal ModuleSignalsMuxModule_L27F26T46_Mux1 : std_logic := '0';
signal ModuleSignalsMuxModule_L27F26T46_Mux2 : std_logic := '0';
signal ModuleSignalsMuxModule_L27F26T46_Mux3 : std_logic := '0';
begin
ModuleSignalsMuxModule_TopLevel_ModuleSignalsMuxModule_AndGate : entity work.ModuleSignalsMuxModule_TopLevel_ModuleSignalsMuxModule_AndGate port map
(
--[BEGIN USER MAP FOR AndGate]
--[END USER MAP FOR AndGate]
I1 => AndGateI1AndGate_I1HardLink,
I2 => AndGateI2AndGate_I2HardLink,
O => AndGateOAndGate_OHardLink

);
ModuleSignalsMuxModule_TopLevel_ModuleSignalsMuxModule_OrGate : entity work.ModuleSignalsMuxModule_TopLevel_ModuleSignalsMuxModule_OrGate port map
(
--[BEGIN USER MAP FOR OrGate]
--[END USER MAP FOR OrGate]
I1 => OrGateI1OrGate_I1HardLink,
I2 => OrGateI2OrGate_I2HardLink,
O => OrGateOOrGate_OHardLink

);
ModuleSignalsMuxModule_TopLevel_ModuleSignalsMuxModule_XorGate : entity work.ModuleSignalsMuxModule_TopLevel_ModuleSignalsMuxModule_XorGate port map
(
--[BEGIN USER MAP FOR XorGate]
--[END USER MAP FOR XorGate]
I1 => XorGateI1XorGate_I1HardLink,
I2 => XorGateI2XorGate_I2HardLink,
O => XorGateOXorGate_OHardLink

);
process(ModuleSignalsMuxModule_L27F26T46_Mux1, ModuleSignalsMuxModule_L27F26T46_Mux2, ModuleSignalsMuxModule_L27F26T46_Mux3, ModuleSignalsMuxModule_L27F26T46_MuxMultiplexerAddress)
begin
case ModuleSignalsMuxModule_L27F26T46_MuxMultiplexerAddress is
  when "00" => 
ModuleSignalsMuxModule_L27F26T46_Mux <= ModuleSignalsMuxModule_L27F26T46_Mux1;
  when "01" => 
ModuleSignalsMuxModule_L27F26T46_Mux <= ModuleSignalsMuxModule_L27F26T46_Mux2;
  when "10" => 
ModuleSignalsMuxModule_L27F26T46_Mux <= ModuleSignalsMuxModule_L27F26T46_Mux3;
  when others => 
ModuleSignalsMuxModule_L27F26T46_Mux <= '0';
end case;

end process;
process(Addr, AndGate_I1, AndGate_I2, AndGate_O, AndGateOAndGate_OHardLink, I1, I2, Inputs_Addr, Inputs_I1, Inputs_I2, ModuleSignalsMuxModule_L27F26T46_Mux, ModuleSignalsMuxModule_L29F41T80_Source, OrGate_I1, OrGate_I2, OrGate_O, OrGateOOrGate_OHardLink, XorGate_I1, XorGate_I2, XorGate_O, XorGateOXorGate_OHardLink)
begin
Inputs_Addr <= Addr;
Inputs_I1 <= I1;
Inputs_I2 <= I2;
AndGate_I1 <= Inputs_I1;
AndGate_I2 <= Inputs_I2;
OrGate_I1 <= Inputs_I1;
OrGate_I2 <= Inputs_I2;
XorGate_I1 <= Inputs_I1;
XorGate_I2 <= Inputs_I2;
O <= ModuleSignalsMuxModule_L27F26T46_Mux;
ModuleSignalsMuxModule_L29F41T80_Source <= (0 => XorGate_O, 1 => OrGate_O, 2 => AndGate_O, others => '0');
CombinedO <= ModuleSignalsMuxModule_L29F41T80_Source;
AndGateI1AndGate_I1HardLink <= AndGate_I1;
AndGateI2AndGate_I2HardLink <= AndGate_I2;
AndGate_O <= AndGateOAndGate_OHardLink;
OrGateI1OrGate_I1HardLink <= OrGate_I1;
OrGateI2OrGate_I2HardLink <= OrGate_I2;
OrGate_O <= OrGateOOrGate_OHardLink;
XorGateI1XorGate_I1HardLink <= XorGate_I1;
XorGateI2XorGate_I2HardLink <= XorGate_I2;
XorGate_O <= XorGateOXorGate_OHardLink;
ModuleSignalsMuxModule_L27F26T46_Mux1 <= AndGate_O;
ModuleSignalsMuxModule_L27F26T46_Mux2 <= OrGate_O;
ModuleSignalsMuxModule_L27F26T46_Mux3 <= XorGate_O;
ModuleSignalsMuxModule_L27F26T46_MuxMultiplexerAddress <= Inputs_Addr;
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
