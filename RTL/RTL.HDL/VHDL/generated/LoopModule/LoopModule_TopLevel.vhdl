-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is LoopModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity LoopModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

InData : in  unsigned(7 downto 0);
OutOr : out  std_logic
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of LoopModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
constant Zero : std_logic := '0';
constant One : std_logic := '1';
constant true : std_logic := '1';
constant false : std_logic := '0';
constant LoopModule_L16F13L25T14_LoopModule_L17F31T36_Expr : std_logic := '0';
constant LoopModule_L16F13L25T14_Inputs_InData_Size : unsigned(4 downto 1)  := "1000";
constant LoopModule_L16F13L25T14_LoopModule_L24F24T29_Expr : std_logic := '0';
signal Inputs_InData : unsigned(8 downto 1)  := "00000000";
signal LoopModule_L16F13L25T14_result : std_logic := '0';
signal LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr : unsigned(8 downto 1)  := "00000000";
signal LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1 : unsigned(8 downto 1)  := "00000000";
signal LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2 : unsigned(8 downto 1)  := "00000000";
begin

process(LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1, LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2)
begin

    for i in 8 downto 1 loop
        LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr(i) <= LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1(i)  AND LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2(i)    ;
    end loop;

    end process;
process(LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr)
begin
LoopModule_L16F13L25T14_result <= LoopModule_L16F13L25T14_LoopModule_L17F31T36_Expr;
for LoopModule_L16F13L25T14_idx in 0 to 7 loop
LoopModule_L16F13L25T14_result <= LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr(1);
end loop;
end process;
process(InData, Inputs_InData, LoopModule_L16F13L25T14_result)
begin
LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1 <= (1 => LoopModule_L16F13L25T14_result, others => '0');
LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2 <= (1 => Inputs_InData(LoopModule_L16F13L25T14_idx), others => '0');
Inputs_InData <= InData;
OutOr <= LoopModule_L16F13L25T14_LoopModule_L24F24T29_Expr;
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
