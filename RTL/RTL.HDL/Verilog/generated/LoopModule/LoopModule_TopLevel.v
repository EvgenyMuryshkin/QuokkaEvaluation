`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is LoopModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module LoopModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input  [7: 0] InData,
	output OutOr
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  LoopModule_L16F13L25T14_LoopModule_L17F31T36_Expr = 1'b0;
wire  [4:1] LoopModule_L16F13L25T14_Inputs_InData_Size = 4'b1000;
wire  LoopModule_L16F13L25T14_LoopModule_L24F24T29_Expr = 1'b0;
wire  [8:1] Inputs_InData;
reg  LoopModule_L16F13L25T14_result = 1'b0;
integer LoopModule_L16F13L25T14_idx;
wire  [8:1] LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr;
wire  [8:1] LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1;
wire  [8:1] LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2;
assign LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr = LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1 & LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2;
always @*
begin
LoopModule_L16F13L25T14_result = LoopModule_L16F13L25T14_LoopModule_L17F31T36_Expr;
for (LoopModule_L16F13L25T14_idx = 0; LoopModule_L16F13L25T14_idx < 8; LoopModule_L16F13L25T14_idx = LoopModule_L16F13L25T14_idx + 1)
begin
//LoopModule_L16F13L25T14_result = LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr[1];
LoopModule_L16F13L25T14_result = LoopModule_L16F13L25T14_result & InData[LoopModule_L16F13L25T14_idx];
end

end
//assign LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_1 = { {7{1'b0}}, LoopModule_L16F13L25T14_result }/*expand*/;
//assign LoopModule_L16F13L25T14_LoopModule_L20F17L22T18_LoopModule_L21F30T57_Expr_2 = { {7{1'b0}}, Inputs_InData[LoopModule_L16F13L25T14_idx] }/*expand*/;
assign Inputs_InData = InData;
assign OutOr = LoopModule_L16F13L25T14_LoopModule_L24F24T29_Expr;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
