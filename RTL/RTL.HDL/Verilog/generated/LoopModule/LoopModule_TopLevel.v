`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is LoopModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module LoopModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input wire  [7: 0] InData,
	output wire OutOr,
	output wire OutAnd,
	output wire OutXor,
	output wire [7: 0] Encode,
	output wire [7: 0] EncodeInv,
	output wire [7: 0] OutTupleAddress,
	output wire OutTupleIsValid
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  LoopModule_L85F13L96T14_LoopModule_L86F32T37_Expr = 1'b0;
wire  LoopModule_L85F13L96T14_LoopModule_L87F31T32_Expr = 1'b0;
wire  [3:0] LoopModule_L85F13L96T14_Inputs_InData_Size = 4'b1000;
wire  [3:0] LoopModule_L16F13L23T14_Inputs_InData_Size = 4'b1000;
wire  LoopModule_L29F13L36T14_LoopModule_L30F31T35_Expr = 1'b1;
wire  [3:0] LoopModule_L29F13L36T14_Inputs_InData_Size = 4'b1000;
wire  [3:0] LoopModule_L42F13L49T14_Inputs_InData_Size = 4'b1000;
wire  LoopModule_L55F13L64T14_LoopModule_L56F31T32_Expr = 1'b0;
wire  [3:0] LoopModule_L55F13L64T14_Inputs_InData_Size = 4'b1000;
wire  LoopModule_L70F13L79T14_LoopModule_L71F30T31_Expr = 1'b0;
wire  [3:0] LoopModule_L70F13L79T14_Inputs_InData_Size = 4'b1000;
wire  [7:0] Inputs_InData;
wire  [7:0] Tuple_Item1;
wire  Tuple_Item2;
reg  LoopModule_L85F13L96T14_isValid;
reg  [7:0] LoopModule_L85F13L96T14_result;
integer LoopModule_L85F13L96T14_idx;
wire  LoopModule_L16F13L23T14_LoopModule_L17F31T47_Index;
reg  LoopModule_L16F13L23T14_result;
integer LoopModule_L16F13L23T14_idx;
reg  LoopModule_L29F13L36T14_result;
integer LoopModule_L29F13L36T14_idx;
wire  LoopModule_L42F13L49T14_LoopModule_L43F31T47_Index;
reg  LoopModule_L42F13L49T14_result;
integer LoopModule_L42F13L49T14_idx;
reg  [7:0] LoopModule_L55F13L64T14_result;
integer LoopModule_L55F13L64T14_idx;
reg signed  [31:0] LoopModule_L70F13L79T14_result;
integer LoopModule_L70F13L79T14_idx;
wire  [7:0] LoopModule_L70F13L79T14_LoopModule_L78F24T36_Cast;
always @*
begin
LoopModule_L85F13L96T14_isValid = LoopModule_L85F13L96T14_LoopModule_L86F32T37_Expr;
LoopModule_L85F13L96T14_result = { {7{1'b0}}, LoopModule_L85F13L96T14_LoopModule_L87F31T32_Expr }/*expand*/;
for (LoopModule_L85F13L96T14_idx = 0; LoopModule_L85F13L96T14_idx < 8; LoopModule_L85F13L96T14_idx = LoopModule_L85F13L96T14_idx + 1)
begin
LoopModule_L85F13L96T14_isValid = LoopModule_L85F13L96T14_isValid | Inputs_InData[LoopModule_L85F13L96T14_idx];
if (Inputs_InData[LoopModule_L85F13L96T14_idx])
begin
LoopModule_L85F13L96T14_result = LoopModule_L85F13L96T14_idx;
end
end

end
always @*
begin
LoopModule_L16F13L23T14_result = LoopModule_L16F13L23T14_LoopModule_L17F31T47_Index;
for (LoopModule_L16F13L23T14_idx = 1; LoopModule_L16F13L23T14_idx < 8; LoopModule_L16F13L23T14_idx = LoopModule_L16F13L23T14_idx + 1)
begin
LoopModule_L16F13L23T14_result = LoopModule_L16F13L23T14_result | Inputs_InData[LoopModule_L16F13L23T14_idx];
end

end
always @*
begin
LoopModule_L29F13L36T14_result = LoopModule_L29F13L36T14_LoopModule_L30F31T35_Expr;
for (LoopModule_L29F13L36T14_idx = 0; LoopModule_L29F13L36T14_idx < 8; LoopModule_L29F13L36T14_idx = LoopModule_L29F13L36T14_idx + 1)
begin
LoopModule_L29F13L36T14_result = LoopModule_L29F13L36T14_result & Inputs_InData[LoopModule_L29F13L36T14_idx];
end

end
always @*
begin
LoopModule_L42F13L49T14_result = LoopModule_L42F13L49T14_LoopModule_L43F31T47_Index;
for (LoopModule_L42F13L49T14_idx = 1; LoopModule_L42F13L49T14_idx < 8; LoopModule_L42F13L49T14_idx = LoopModule_L42F13L49T14_idx + 1)
begin
LoopModule_L42F13L49T14_result = LoopModule_L42F13L49T14_result ^ Inputs_InData[LoopModule_L42F13L49T14_idx];
end

end
always @*
begin
LoopModule_L55F13L64T14_result = { {7{1'b0}}, LoopModule_L55F13L64T14_LoopModule_L56F31T32_Expr }/*expand*/;
for (LoopModule_L55F13L64T14_idx = 0; LoopModule_L55F13L64T14_idx < 8; LoopModule_L55F13L64T14_idx = LoopModule_L55F13L64T14_idx + 1)
begin
if (Inputs_InData[LoopModule_L55F13L64T14_idx])
begin
LoopModule_L55F13L64T14_result = LoopModule_L55F13L64T14_idx;
end
end

end
always @*
begin
LoopModule_L70F13L79T14_result = { {31{1'b0}}, LoopModule_L70F13L79T14_LoopModule_L71F30T31_Expr }/*expand*/;
for (LoopModule_L70F13L79T14_idx = 8; LoopModule_L70F13L79T14_idx > 0; LoopModule_L70F13L79T14_idx = LoopModule_L70F13L79T14_idx - 1)
begin
if (Inputs_InData[LoopModule_L70F13L79T14_idx - 1])
begin
LoopModule_L70F13L79T14_result = LoopModule_L70F13L79T14_idx - 1;
end
end

end
assign Inputs_InData = InData;
assign Tuple_Item1 = LoopModule_L85F13L96T14_result;
assign Tuple_Item2 = LoopModule_L85F13L96T14_isValid;
assign LoopModule_L16F13L23T14_LoopModule_L17F31T47_Index = Inputs_InData[0];
assign OutOr = LoopModule_L16F13L23T14_result;
assign OutAnd = LoopModule_L29F13L36T14_result;
assign LoopModule_L42F13L49T14_LoopModule_L43F31T47_Index = Inputs_InData[0];
assign OutXor = LoopModule_L42F13L49T14_result;
assign Encode = LoopModule_L55F13L64T14_result;
assign LoopModule_L70F13L79T14_LoopModule_L78F24T36_Cast = LoopModule_L70F13L79T14_result[7:0]/*truncate*/;
assign EncodeInv = LoopModule_L70F13L79T14_LoopModule_L78F24T36_Cast;
assign OutTupleAddress = Tuple_Item1;
assign OutTupleIsValid = Tuple_Item2;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
