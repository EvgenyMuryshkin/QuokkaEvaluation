`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is SynchronousROMModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module SynchronousROMModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input wire  Clock,
	input wire  Reset,
	input wire  [7: 0] Addr1,
	input wire  [7: 0] Addr2,
	output wire [7: 0] Data1,
	output wire [7: 0] Data2
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  [7:0] Inputs_Addr1;
wire  [7:0] Inputs_Addr2;
reg  [7:0] State_Data1 = 8'b00000000;
reg  [7:0] State_Data2 = 8'b00000000;
reg [7:0] State_Buff [0 : 255];
initial
begin : Init_State_Buff
	$readmemh("SynchronousROMModule_TopLevel_State_Buff.hex", State_Buff);
end
always @(posedge Clock)
begin
State_Data1 <= State_Buff[Inputs_Addr1];
end
always @(posedge Clock)
begin
State_Data2 <= State_Buff[Inputs_Addr2];
end
assign Inputs_Addr1 = Addr1;
assign Inputs_Addr2 = Addr2;
assign Data1 = State_Data1;
assign Data2 = State_Data2;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
