`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is BlinkerSim_TopLevel_QuSoCModule_CounterRegister, clock frequency is 1Hz, Embedded
// FSM summary
// -- Packages
module BlinkerSim_TopLevel_QuSoCModule_CounterRegister (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input  BoardSignals_Clock,
	input  BoardSignals_Reset,
	input  BoardSignals_Running,
	input  BoardSignals_Starting,
	input  BoardSignals_Started,
	input  [32: 1] Common_Address,
	input  [32: 1] Common_WriteValue,
	input  Common_WE,
	input  Common_RE,
	input  [32: 1] DeviceAddress,
	output [32: 1] ReadValue,
	output IsReady,
	output IsActive
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  SoCRegisterModule_L22F41T45_Expr = 1'b1;
wire  [32:1] Inputs_Common_Address;
wire  [32:1] Inputs_Common_WriteValue;
wire  Inputs_Common_WE;
wire  Inputs_Common_RE;
wire  [32:1] Inputs_DeviceAddress;
reg  [32:1] NextState_Value = 32'b00000000000000000000000000000000;
wire  internalIsActive;
reg  [32:1] State_Value = 32'b00000000000000000000000000000000;
wire  [32:1] State_ValueDefault = 32'b00000000000000000000000000000000;
wire  SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr;
wire  SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr_1;
wire  SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr_2;
wire  SoCRegisterModule_L19F34T79_Expr;
wire signed  [33:1] SoCRegisterModule_L19F34T79_ExprLhs;
wire signed  [33:1] SoCRegisterModule_L19F34T79_ExprRhs;
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
State_Value <= State_ValueDefault;
end
else begin
State_Value <= NextState_Value;
end
end
assign SoCRegisterModule_L19F34T79_Expr = SoCRegisterModule_L19F34T79_ExprLhs == SoCRegisterModule_L19F34T79_ExprRhs ? 1'b1 : 1'b0;
assign SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr = SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr_1 & SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr_2;
always @*
begin
NextState_Value = State_Value;
if ( SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr == 1 ) begin
NextState_Value = Inputs_Common_WriteValue;
end

end
assign SoCRegisterModule_L19F34T79_ExprLhs = { {1{1'b0}}, Inputs_Common_Address }/*expand*/;
assign SoCRegisterModule_L19F34T79_ExprRhs = { {1{1'b0}}, Inputs_DeviceAddress }/*expand*/;
assign SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr_1 = Inputs_Common_WE;
assign SoCRegisterModule_L25F9L30T10_SoCRegisterModule_L26F17T53_Expr_2 = internalIsActive;
assign Inputs_Common_Address = Common_Address;
assign Inputs_Common_WriteValue = Common_WriteValue;
assign Inputs_Common_WE = Common_WE;
assign Inputs_Common_RE = Common_RE;
assign Inputs_DeviceAddress = DeviceAddress;
assign internalIsActive = SoCRegisterModule_L19F34T79_Expr;
assign ReadValue = State_Value;
assign IsReady = SoCRegisterModule_L22F41T45_Expr;
assign IsActive = internalIsActive;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
